
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Tickets
 * 
 */
export type Tickets = $Result.DefaultSelection<Prisma.$TicketsPayload>
/**
 * Model Replies
 * 
 */
export type Replies = $Result.DefaultSelection<Prisma.$RepliesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  Admin: 'Admin',
  Frontend: 'Frontend',
  Backend: 'Backend',
  UIUX: 'UIUX',
  DevOps: 'DevOps',
  DataScientist: 'DataScientist',
  DataAnalyst: 'DataAnalyst',
  ITSupport: 'ITSupport',
  ProductManager: 'ProductManager',
  ProjectManager: 'ProjectManager',
  User: 'User'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const StatusType: {
  Backlog: 'Backlog',
  OnProgress: 'OnProgress',
  Resolved: 'Resolved'
};

export type StatusType = (typeof StatusType)[keyof typeof StatusType]


export const PriorityType: {
  High: 'High',
  Normal: 'Normal'
};

export type PriorityType = (typeof PriorityType)[keyof typeof PriorityType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type StatusType = $Enums.StatusType

export const StatusType: typeof $Enums.StatusType

export type PriorityType = $Enums.PriorityType

export const PriorityType: typeof $Enums.PriorityType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.tickets`: Exposes CRUD operations for the **Tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.tickets.findMany()
    * ```
    */
  get tickets(): Prisma.TicketsDelegate<ExtArgs>;

  /**
   * `prisma.replies`: Exposes CRUD operations for the **Replies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Replies
    * const replies = await prisma.replies.findMany()
    * ```
    */
  get replies(): Prisma.RepliesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.0
   * Query Engine version: 5fe21811a6ba0b952a3bc71400666511fe3b902f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Tickets: 'Tickets',
    Replies: 'Replies'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "tickets" | "replies"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Tickets: {
        payload: Prisma.$TicketsPayload<ExtArgs>
        fields: Prisma.TicketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          findFirst: {
            args: Prisma.TicketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          findMany: {
            args: Prisma.TicketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>[]
          }
          create: {
            args: Prisma.TicketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          createMany: {
            args: Prisma.TicketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TicketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          update: {
            args: Prisma.TicketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          deleteMany: {
            args: Prisma.TicketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TicketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TicketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TicketsPayload>
          }
          aggregate: {
            args: Prisma.TicketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTickets>
          }
          groupBy: {
            args: Prisma.TicketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketsCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsCountAggregateOutputType> | number
          }
        }
      }
      Replies: {
        payload: Prisma.$RepliesPayload<ExtArgs>
        fields: Prisma.RepliesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RepliesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RepliesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload>
          }
          findFirst: {
            args: Prisma.RepliesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RepliesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload>
          }
          findMany: {
            args: Prisma.RepliesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload>[]
          }
          create: {
            args: Prisma.RepliesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload>
          }
          createMany: {
            args: Prisma.RepliesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RepliesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload>
          }
          update: {
            args: Prisma.RepliesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload>
          }
          deleteMany: {
            args: Prisma.RepliesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RepliesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RepliesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RepliesPayload>
          }
          aggregate: {
            args: Prisma.RepliesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReplies>
          }
          groupBy: {
            args: Prisma.RepliesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RepliesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RepliesCountArgs<ExtArgs>
            result: $Utils.Optional<RepliesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    tickets: number
    replies: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | UsersCountOutputTypeCountTicketsArgs
    replies?: boolean | UsersCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepliesWhereInput
  }


  /**
   * Count Type TicketsCountOutputType
   */

  export type TicketsCountOutputType = {
    replies: number
  }

  export type TicketsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | TicketsCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsCountOutputType
     */
    select?: TicketsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepliesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    email: string | null
    fullname: string | null
    username: string | null
    phone_number: string | null
    password: string | null
    profile_url: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    email: string | null
    fullname: string | null
    username: string | null
    phone_number: string | null
    password: string | null
    profile_url: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    role: number
    email: number
    fullname: number
    username: number
    phone_number: number
    password: number
    profile_url: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    role?: true
    email?: true
    fullname?: true
    username?: true
    phone_number?: true
    password?: true
    profile_url?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    role?: true
    email?: true
    fullname?: true
    username?: true
    phone_number?: true
    password?: true
    profile_url?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    role?: true
    email?: true
    fullname?: true
    username?: true
    phone_number?: true
    password?: true
    profile_url?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    role: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url: string
    created_at: Date
    updated_at: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    email?: boolean
    fullname?: boolean
    username?: boolean
    phone_number?: boolean
    password?: boolean
    profile_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    tickets?: boolean | Users$ticketsArgs<ExtArgs>
    replies?: boolean | Users$repliesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type UsersSelectScalar = {
    id?: boolean
    role?: boolean
    email?: boolean
    fullname?: boolean
    username?: boolean
    phone_number?: boolean
    password?: boolean
    profile_url?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Users$ticketsArgs<ExtArgs>
    replies?: boolean | Users$repliesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      tickets: Prisma.$TicketsPayload<ExtArgs>[]
      replies: Prisma.$RepliesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.UserRole
      email: string
      fullname: string
      username: string
      phone_number: string
      password: string
      profile_url: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends Users$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Users$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany"> | Null>
    replies<T extends Users$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Users$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly role: FieldRef<"Users", 'UserRole'>
    readonly email: FieldRef<"Users", 'String'>
    readonly fullname: FieldRef<"Users", 'String'>
    readonly username: FieldRef<"Users", 'String'>
    readonly phone_number: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly profile_url: FieldRef<"Users", 'String'>
    readonly created_at: FieldRef<"Users", 'DateTime'>
    readonly updated_at: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.tickets
   */
  export type Users$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    cursor?: TicketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Users.replies
   */
  export type Users$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    where?: RepliesWhereInput
    orderBy?: RepliesOrderByWithRelationInput | RepliesOrderByWithRelationInput[]
    cursor?: RepliesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Tickets
   */

  export type AggregateTickets = {
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  export type TicketsAvgAggregateOutputType = {
    id: number | null
  }

  export type TicketsSumAggregateOutputType = {
    id: number | null
  }

  export type TicketsMinAggregateOutputType = {
    id: number | null
    status: $Enums.StatusType | null
    priority_status: $Enums.PriorityType | null
    request_ticket: string | null
    due_date: string | null
    role_pic: string | null
    product_status: string | null
    ticket_body: string | null
    user_id: string | null
  }

  export type TicketsMaxAggregateOutputType = {
    id: number | null
    status: $Enums.StatusType | null
    priority_status: $Enums.PriorityType | null
    request_ticket: string | null
    due_date: string | null
    role_pic: string | null
    product_status: string | null
    ticket_body: string | null
    user_id: string | null
  }

  export type TicketsCountAggregateOutputType = {
    id: number
    status: number
    priority_status: number
    request_ticket: number
    due_date: number
    role_pic: number
    product_status: number
    ticket_body: number
    user_id: number
    _all: number
  }


  export type TicketsAvgAggregateInputType = {
    id?: true
  }

  export type TicketsSumAggregateInputType = {
    id?: true
  }

  export type TicketsMinAggregateInputType = {
    id?: true
    status?: true
    priority_status?: true
    request_ticket?: true
    due_date?: true
    role_pic?: true
    product_status?: true
    ticket_body?: true
    user_id?: true
  }

  export type TicketsMaxAggregateInputType = {
    id?: true
    status?: true
    priority_status?: true
    request_ticket?: true
    due_date?: true
    role_pic?: true
    product_status?: true
    ticket_body?: true
    user_id?: true
  }

  export type TicketsCountAggregateInputType = {
    id?: true
    status?: true
    priority_status?: true
    request_ticket?: true
    due_date?: true
    role_pic?: true
    product_status?: true
    ticket_body?: true
    user_id?: true
    _all?: true
  }

  export type TicketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to aggregate.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsMaxAggregateInputType
  }

  export type GetTicketsAggregateType<T extends TicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickets[P]>
      : GetScalarType<T[P], AggregateTickets[P]>
  }




  export type TicketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketsWhereInput
    orderBy?: TicketsOrderByWithAggregationInput | TicketsOrderByWithAggregationInput[]
    by: TicketsScalarFieldEnum[] | TicketsScalarFieldEnum
    having?: TicketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsCountAggregateInputType | true
    _avg?: TicketsAvgAggregateInputType
    _sum?: TicketsSumAggregateInputType
    _min?: TicketsMinAggregateInputType
    _max?: TicketsMaxAggregateInputType
  }

  export type TicketsGroupByOutputType = {
    id: number
    status: $Enums.StatusType
    priority_status: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    user_id: string
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  type GetTicketsGroupByPayload<T extends TicketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsGroupByOutputType[P]>
        }
      >
    >


  export type TicketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    priority_status?: boolean
    request_ticket?: boolean
    due_date?: boolean
    role_pic?: boolean
    product_status?: boolean
    ticket_body?: boolean
    user_id?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    replies?: boolean | Tickets$repliesArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>


  export type TicketsSelectScalar = {
    id?: boolean
    status?: boolean
    priority_status?: boolean
    request_ticket?: boolean
    due_date?: boolean
    role_pic?: boolean
    product_status?: boolean
    ticket_body?: boolean
    user_id?: boolean
  }

  export type TicketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    replies?: boolean | Tickets$repliesArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TicketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tickets"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      replies: Prisma.$RepliesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: $Enums.StatusType
      priority_status: $Enums.PriorityType
      request_ticket: string
      due_date: string
      role_pic: string
      product_status: string
      ticket_body: string
      user_id: string
    }, ExtArgs["result"]["tickets"]>
    composites: {}
  }

  type TicketsGetPayload<S extends boolean | null | undefined | TicketsDefaultArgs> = $Result.GetResult<Prisma.$TicketsPayload, S>

  type TicketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketsCountAggregateInputType | true
    }

  export interface TicketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tickets'], meta: { name: 'Tickets' } }
    /**
     * Find zero or one Tickets that matches the filter.
     * @param {TicketsFindUniqueArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TicketsFindUniqueArgs>(args: SelectSubset<T, TicketsFindUniqueArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tickets that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TicketsFindUniqueOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TicketsFindUniqueOrThrowArgs>(args: SelectSubset<T, TicketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TicketsFindFirstArgs>(args?: SelectSubset<T, TicketsFindFirstArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindFirstOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TicketsFindFirstOrThrowArgs>(args?: SelectSubset<T, TicketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.tickets.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.tickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsWithIdOnly = await prisma.tickets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TicketsFindManyArgs>(args?: SelectSubset<T, TicketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tickets.
     * @param {TicketsCreateArgs} args - Arguments to create a Tickets.
     * @example
     * // Create one Tickets
     * const Tickets = await prisma.tickets.create({
     *   data: {
     *     // ... data to create a Tickets
     *   }
     * })
     * 
     */
    create<T extends TicketsCreateArgs>(args: SelectSubset<T, TicketsCreateArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tickets.
     * @param {TicketsCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TicketsCreateManyArgs>(args?: SelectSubset<T, TicketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tickets.
     * @param {TicketsDeleteArgs} args - Arguments to delete one Tickets.
     * @example
     * // Delete one Tickets
     * const Tickets = await prisma.tickets.delete({
     *   where: {
     *     // ... filter to delete one Tickets
     *   }
     * })
     * 
     */
    delete<T extends TicketsDeleteArgs>(args: SelectSubset<T, TicketsDeleteArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tickets.
     * @param {TicketsUpdateArgs} args - Arguments to update one Tickets.
     * @example
     * // Update one Tickets
     * const tickets = await prisma.tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TicketsUpdateArgs>(args: SelectSubset<T, TicketsUpdateArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {TicketsDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TicketsDeleteManyArgs>(args?: SelectSubset<T, TicketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TicketsUpdateManyArgs>(args: SelectSubset<T, TicketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tickets.
     * @param {TicketsUpsertArgs} args - Arguments to update or create a Tickets.
     * @example
     * // Update or create a Tickets
     * const tickets = await prisma.tickets.upsert({
     *   create: {
     *     // ... data to create a Tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tickets we want to update
     *   }
     * })
     */
    upsert<T extends TicketsUpsertArgs>(args: SelectSubset<T, TicketsUpsertArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.tickets.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketsCountArgs>(
      args?: Subset<T, TicketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsAggregateArgs>(args: Subset<T, TicketsAggregateArgs>): Prisma.PrismaPromise<GetTicketsAggregateType<T>>

    /**
     * Group by Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketsGroupByArgs['orderBy'] }
        : { orderBy?: TicketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tickets model
   */
  readonly fields: TicketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    replies<T extends Tickets$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Tickets$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tickets model
   */ 
  interface TicketsFieldRefs {
    readonly id: FieldRef<"Tickets", 'Int'>
    readonly status: FieldRef<"Tickets", 'StatusType'>
    readonly priority_status: FieldRef<"Tickets", 'PriorityType'>
    readonly request_ticket: FieldRef<"Tickets", 'String'>
    readonly due_date: FieldRef<"Tickets", 'String'>
    readonly role_pic: FieldRef<"Tickets", 'String'>
    readonly product_status: FieldRef<"Tickets", 'String'>
    readonly ticket_body: FieldRef<"Tickets", 'String'>
    readonly user_id: FieldRef<"Tickets", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tickets findUnique
   */
  export type TicketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets findUniqueOrThrow
   */
  export type TicketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets findFirst
   */
  export type TicketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets findFirstOrThrow
   */
  export type TicketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets findMany
   */
  export type TicketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketsOrderByWithRelationInput | TicketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * Tickets create
   */
  export type TicketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The data needed to create a Tickets.
     */
    data: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
  }

  /**
   * Tickets createMany
   */
  export type TicketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketsCreateManyInput | TicketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tickets update
   */
  export type TicketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The data needed to update a Tickets.
     */
    data: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
    /**
     * Choose, which Tickets to update.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets updateMany
   */
  export type TicketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketsWhereInput
  }

  /**
   * Tickets upsert
   */
  export type TicketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * The filter to search for the Tickets to update in case it exists.
     */
    where: TicketsWhereUniqueInput
    /**
     * In case the Tickets found by the `where` argument doesn't exist, create a new Tickets with this data.
     */
    create: XOR<TicketsCreateInput, TicketsUncheckedCreateInput>
    /**
     * In case the Tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketsUpdateInput, TicketsUncheckedUpdateInput>
  }

  /**
   * Tickets delete
   */
  export type TicketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
    /**
     * Filter which Tickets to delete.
     */
    where: TicketsWhereUniqueInput
  }

  /**
   * Tickets deleteMany
   */
  export type TicketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketsWhereInput
  }

  /**
   * Tickets.replies
   */
  export type Tickets$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    where?: RepliesWhereInput
    orderBy?: RepliesOrderByWithRelationInput | RepliesOrderByWithRelationInput[]
    cursor?: RepliesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * Tickets without action
   */
  export type TicketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tickets
     */
    select?: TicketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TicketsInclude<ExtArgs> | null
  }


  /**
   * Model Replies
   */

  export type AggregateReplies = {
    _count: RepliesCountAggregateOutputType | null
    _avg: RepliesAvgAggregateOutputType | null
    _sum: RepliesSumAggregateOutputType | null
    _min: RepliesMinAggregateOutputType | null
    _max: RepliesMaxAggregateOutputType | null
  }

  export type RepliesAvgAggregateOutputType = {
    id: number | null
    ticket_id: number | null
  }

  export type RepliesSumAggregateOutputType = {
    id: number | null
    ticket_id: number | null
  }

  export type RepliesMinAggregateOutputType = {
    id: number | null
    reply_body: string | null
    ticket_id: number | null
    user_id: string | null
  }

  export type RepliesMaxAggregateOutputType = {
    id: number | null
    reply_body: string | null
    ticket_id: number | null
    user_id: string | null
  }

  export type RepliesCountAggregateOutputType = {
    id: number
    reply_body: number
    ticket_id: number
    user_id: number
    _all: number
  }


  export type RepliesAvgAggregateInputType = {
    id?: true
    ticket_id?: true
  }

  export type RepliesSumAggregateInputType = {
    id?: true
    ticket_id?: true
  }

  export type RepliesMinAggregateInputType = {
    id?: true
    reply_body?: true
    ticket_id?: true
    user_id?: true
  }

  export type RepliesMaxAggregateInputType = {
    id?: true
    reply_body?: true
    ticket_id?: true
    user_id?: true
  }

  export type RepliesCountAggregateInputType = {
    id?: true
    reply_body?: true
    ticket_id?: true
    user_id?: true
    _all?: true
  }

  export type RepliesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Replies to aggregate.
     */
    where?: RepliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: RepliesOrderByWithRelationInput | RepliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RepliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Replies
    **/
    _count?: true | RepliesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RepliesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RepliesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RepliesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RepliesMaxAggregateInputType
  }

  export type GetRepliesAggregateType<T extends RepliesAggregateArgs> = {
        [P in keyof T & keyof AggregateReplies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReplies[P]>
      : GetScalarType<T[P], AggregateReplies[P]>
  }




  export type RepliesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RepliesWhereInput
    orderBy?: RepliesOrderByWithAggregationInput | RepliesOrderByWithAggregationInput[]
    by: RepliesScalarFieldEnum[] | RepliesScalarFieldEnum
    having?: RepliesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RepliesCountAggregateInputType | true
    _avg?: RepliesAvgAggregateInputType
    _sum?: RepliesSumAggregateInputType
    _min?: RepliesMinAggregateInputType
    _max?: RepliesMaxAggregateInputType
  }

  export type RepliesGroupByOutputType = {
    id: number
    reply_body: string
    ticket_id: number
    user_id: string
    _count: RepliesCountAggregateOutputType | null
    _avg: RepliesAvgAggregateOutputType | null
    _sum: RepliesSumAggregateOutputType | null
    _min: RepliesMinAggregateOutputType | null
    _max: RepliesMaxAggregateOutputType | null
  }

  type GetRepliesGroupByPayload<T extends RepliesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RepliesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RepliesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RepliesGroupByOutputType[P]>
            : GetScalarType<T[P], RepliesGroupByOutputType[P]>
        }
      >
    >


  export type RepliesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reply_body?: boolean
    ticket_id?: boolean
    user_id?: boolean
    ticket?: boolean | TicketsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["replies"]>


  export type RepliesSelectScalar = {
    id?: boolean
    reply_body?: boolean
    ticket_id?: boolean
    user_id?: boolean
  }

  export type RepliesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ticket?: boolean | TicketsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $RepliesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Replies"
    objects: {
      ticket: Prisma.$TicketsPayload<ExtArgs>
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reply_body: string
      ticket_id: number
      user_id: string
    }, ExtArgs["result"]["replies"]>
    composites: {}
  }

  type RepliesGetPayload<S extends boolean | null | undefined | RepliesDefaultArgs> = $Result.GetResult<Prisma.$RepliesPayload, S>

  type RepliesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RepliesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RepliesCountAggregateInputType | true
    }

  export interface RepliesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Replies'], meta: { name: 'Replies' } }
    /**
     * Find zero or one Replies that matches the filter.
     * @param {RepliesFindUniqueArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RepliesFindUniqueArgs>(args: SelectSubset<T, RepliesFindUniqueArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Replies that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RepliesFindUniqueOrThrowArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RepliesFindUniqueOrThrowArgs>(args: SelectSubset<T, RepliesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesFindFirstArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RepliesFindFirstArgs>(args?: SelectSubset<T, RepliesFindFirstArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Replies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesFindFirstOrThrowArgs} args - Arguments to find a Replies
     * @example
     * // Get one Replies
     * const replies = await prisma.replies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RepliesFindFirstOrThrowArgs>(args?: SelectSubset<T, RepliesFindFirstOrThrowArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Replies
     * const replies = await prisma.replies.findMany()
     * 
     * // Get first 10 Replies
     * const replies = await prisma.replies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const repliesWithIdOnly = await prisma.replies.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RepliesFindManyArgs>(args?: SelectSubset<T, RepliesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Replies.
     * @param {RepliesCreateArgs} args - Arguments to create a Replies.
     * @example
     * // Create one Replies
     * const Replies = await prisma.replies.create({
     *   data: {
     *     // ... data to create a Replies
     *   }
     * })
     * 
     */
    create<T extends RepliesCreateArgs>(args: SelectSubset<T, RepliesCreateArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Replies.
     * @param {RepliesCreateManyArgs} args - Arguments to create many Replies.
     * @example
     * // Create many Replies
     * const replies = await prisma.replies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RepliesCreateManyArgs>(args?: SelectSubset<T, RepliesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Replies.
     * @param {RepliesDeleteArgs} args - Arguments to delete one Replies.
     * @example
     * // Delete one Replies
     * const Replies = await prisma.replies.delete({
     *   where: {
     *     // ... filter to delete one Replies
     *   }
     * })
     * 
     */
    delete<T extends RepliesDeleteArgs>(args: SelectSubset<T, RepliesDeleteArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Replies.
     * @param {RepliesUpdateArgs} args - Arguments to update one Replies.
     * @example
     * // Update one Replies
     * const replies = await prisma.replies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RepliesUpdateArgs>(args: SelectSubset<T, RepliesUpdateArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Replies.
     * @param {RepliesDeleteManyArgs} args - Arguments to filter Replies to delete.
     * @example
     * // Delete a few Replies
     * const { count } = await prisma.replies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RepliesDeleteManyArgs>(args?: SelectSubset<T, RepliesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Replies
     * const replies = await prisma.replies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RepliesUpdateManyArgs>(args: SelectSubset<T, RepliesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Replies.
     * @param {RepliesUpsertArgs} args - Arguments to update or create a Replies.
     * @example
     * // Update or create a Replies
     * const replies = await prisma.replies.upsert({
     *   create: {
     *     // ... data to create a Replies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Replies we want to update
     *   }
     * })
     */
    upsert<T extends RepliesUpsertArgs>(args: SelectSubset<T, RepliesUpsertArgs<ExtArgs>>): Prisma__RepliesClient<$Result.GetResult<Prisma.$RepliesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesCountArgs} args - Arguments to filter Replies to count.
     * @example
     * // Count the number of Replies
     * const count = await prisma.replies.count({
     *   where: {
     *     // ... the filter for the Replies we want to count
     *   }
     * })
    **/
    count<T extends RepliesCountArgs>(
      args?: Subset<T, RepliesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RepliesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RepliesAggregateArgs>(args: Subset<T, RepliesAggregateArgs>): Prisma.PrismaPromise<GetRepliesAggregateType<T>>

    /**
     * Group by Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RepliesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RepliesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RepliesGroupByArgs['orderBy'] }
        : { orderBy?: RepliesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RepliesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRepliesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Replies model
   */
  readonly fields: RepliesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Replies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RepliesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ticket<T extends TicketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TicketsDefaultArgs<ExtArgs>>): Prisma__TicketsClient<$Result.GetResult<Prisma.$TicketsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Replies model
   */ 
  interface RepliesFieldRefs {
    readonly id: FieldRef<"Replies", 'Int'>
    readonly reply_body: FieldRef<"Replies", 'String'>
    readonly ticket_id: FieldRef<"Replies", 'Int'>
    readonly user_id: FieldRef<"Replies", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Replies findUnique
   */
  export type RepliesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * Filter, which Replies to fetch.
     */
    where: RepliesWhereUniqueInput
  }

  /**
   * Replies findUniqueOrThrow
   */
  export type RepliesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * Filter, which Replies to fetch.
     */
    where: RepliesWhereUniqueInput
  }

  /**
   * Replies findFirst
   */
  export type RepliesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * Filter, which Replies to fetch.
     */
    where?: RepliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: RepliesOrderByWithRelationInput | RepliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: RepliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * Replies findFirstOrThrow
   */
  export type RepliesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * Filter, which Replies to fetch.
     */
    where?: RepliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: RepliesOrderByWithRelationInput | RepliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: RepliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * Replies findMany
   */
  export type RepliesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * Filter, which Replies to fetch.
     */
    where?: RepliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: RepliesOrderByWithRelationInput | RepliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Replies.
     */
    cursor?: RepliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    distinct?: RepliesScalarFieldEnum | RepliesScalarFieldEnum[]
  }

  /**
   * Replies create
   */
  export type RepliesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * The data needed to create a Replies.
     */
    data: XOR<RepliesCreateInput, RepliesUncheckedCreateInput>
  }

  /**
   * Replies createMany
   */
  export type RepliesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Replies.
     */
    data: RepliesCreateManyInput | RepliesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Replies update
   */
  export type RepliesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * The data needed to update a Replies.
     */
    data: XOR<RepliesUpdateInput, RepliesUncheckedUpdateInput>
    /**
     * Choose, which Replies to update.
     */
    where: RepliesWhereUniqueInput
  }

  /**
   * Replies updateMany
   */
  export type RepliesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Replies.
     */
    data: XOR<RepliesUpdateManyMutationInput, RepliesUncheckedUpdateManyInput>
    /**
     * Filter which Replies to update
     */
    where?: RepliesWhereInput
  }

  /**
   * Replies upsert
   */
  export type RepliesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * The filter to search for the Replies to update in case it exists.
     */
    where: RepliesWhereUniqueInput
    /**
     * In case the Replies found by the `where` argument doesn't exist, create a new Replies with this data.
     */
    create: XOR<RepliesCreateInput, RepliesUncheckedCreateInput>
    /**
     * In case the Replies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RepliesUpdateInput, RepliesUncheckedUpdateInput>
  }

  /**
   * Replies delete
   */
  export type RepliesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
    /**
     * Filter which Replies to delete.
     */
    where: RepliesWhereUniqueInput
  }

  /**
   * Replies deleteMany
   */
  export type RepliesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Replies to delete
     */
    where?: RepliesWhereInput
  }

  /**
   * Replies without action
   */
  export type RepliesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Replies
     */
    select?: RepliesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RepliesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    role: 'role',
    email: 'email',
    fullname: 'fullname',
    username: 'username',
    phone_number: 'phone_number',
    password: 'password',
    profile_url: 'profile_url',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const TicketsScalarFieldEnum: {
    id: 'id',
    status: 'status',
    priority_status: 'priority_status',
    request_ticket: 'request_ticket',
    due_date: 'due_date',
    role_pic: 'role_pic',
    product_status: 'product_status',
    ticket_body: 'ticket_body',
    user_id: 'user_id'
  };

  export type TicketsScalarFieldEnum = (typeof TicketsScalarFieldEnum)[keyof typeof TicketsScalarFieldEnum]


  export const RepliesScalarFieldEnum: {
    id: 'id',
    reply_body: 'reply_body',
    ticket_id: 'ticket_id',
    user_id: 'user_id'
  };

  export type RepliesScalarFieldEnum = (typeof RepliesScalarFieldEnum)[keyof typeof RepliesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'StatusType'
   */
  export type EnumStatusTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusType'>
    


  /**
   * Reference to a field of type 'PriorityType'
   */
  export type EnumPriorityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriorityType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    role?: EnumUserRoleFilter<"Users"> | $Enums.UserRole
    email?: StringFilter<"Users"> | string
    fullname?: StringFilter<"Users"> | string
    username?: StringFilter<"Users"> | string
    phone_number?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    profile_url?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeFilter<"Users"> | Date | string
    tickets?: TicketsListRelationFilter
    replies?: RepliesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    profile_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tickets?: TicketsOrderByRelationAggregateInput
    replies?: RepliesOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    role?: EnumUserRoleFilter<"Users"> | $Enums.UserRole
    fullname?: StringFilter<"Users"> | string
    phone_number?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    profile_url?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    updated_at?: DateTimeFilter<"Users"> | Date | string
    tickets?: TicketsListRelationFilter
    replies?: RepliesListRelationFilter
  }, "id" | "email" | "username">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    profile_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    role?: EnumUserRoleWithAggregatesFilter<"Users"> | $Enums.UserRole
    email?: StringWithAggregatesFilter<"Users"> | string
    fullname?: StringWithAggregatesFilter<"Users"> | string
    username?: StringWithAggregatesFilter<"Users"> | string
    phone_number?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    profile_url?: StringWithAggregatesFilter<"Users"> | string
    created_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type TicketsWhereInput = {
    AND?: TicketsWhereInput | TicketsWhereInput[]
    OR?: TicketsWhereInput[]
    NOT?: TicketsWhereInput | TicketsWhereInput[]
    id?: IntFilter<"Tickets"> | number
    status?: EnumStatusTypeFilter<"Tickets"> | $Enums.StatusType
    priority_status?: EnumPriorityTypeFilter<"Tickets"> | $Enums.PriorityType
    request_ticket?: StringFilter<"Tickets"> | string
    due_date?: StringFilter<"Tickets"> | string
    role_pic?: StringFilter<"Tickets"> | string
    product_status?: StringFilter<"Tickets"> | string
    ticket_body?: StringFilter<"Tickets"> | string
    user_id?: StringFilter<"Tickets"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    replies?: RepliesListRelationFilter
  }

  export type TicketsOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    priority_status?: SortOrder
    request_ticket?: SortOrder
    due_date?: SortOrder
    role_pic?: SortOrder
    product_status?: SortOrder
    ticket_body?: SortOrder
    user_id?: SortOrder
    user?: UsersOrderByWithRelationInput
    replies?: RepliesOrderByRelationAggregateInput
  }

  export type TicketsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TicketsWhereInput | TicketsWhereInput[]
    OR?: TicketsWhereInput[]
    NOT?: TicketsWhereInput | TicketsWhereInput[]
    status?: EnumStatusTypeFilter<"Tickets"> | $Enums.StatusType
    priority_status?: EnumPriorityTypeFilter<"Tickets"> | $Enums.PriorityType
    request_ticket?: StringFilter<"Tickets"> | string
    due_date?: StringFilter<"Tickets"> | string
    role_pic?: StringFilter<"Tickets"> | string
    product_status?: StringFilter<"Tickets"> | string
    ticket_body?: StringFilter<"Tickets"> | string
    user_id?: StringFilter<"Tickets"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    replies?: RepliesListRelationFilter
  }, "id">

  export type TicketsOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    priority_status?: SortOrder
    request_ticket?: SortOrder
    due_date?: SortOrder
    role_pic?: SortOrder
    product_status?: SortOrder
    ticket_body?: SortOrder
    user_id?: SortOrder
    _count?: TicketsCountOrderByAggregateInput
    _avg?: TicketsAvgOrderByAggregateInput
    _max?: TicketsMaxOrderByAggregateInput
    _min?: TicketsMinOrderByAggregateInput
    _sum?: TicketsSumOrderByAggregateInput
  }

  export type TicketsScalarWhereWithAggregatesInput = {
    AND?: TicketsScalarWhereWithAggregatesInput | TicketsScalarWhereWithAggregatesInput[]
    OR?: TicketsScalarWhereWithAggregatesInput[]
    NOT?: TicketsScalarWhereWithAggregatesInput | TicketsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tickets"> | number
    status?: EnumStatusTypeWithAggregatesFilter<"Tickets"> | $Enums.StatusType
    priority_status?: EnumPriorityTypeWithAggregatesFilter<"Tickets"> | $Enums.PriorityType
    request_ticket?: StringWithAggregatesFilter<"Tickets"> | string
    due_date?: StringWithAggregatesFilter<"Tickets"> | string
    role_pic?: StringWithAggregatesFilter<"Tickets"> | string
    product_status?: StringWithAggregatesFilter<"Tickets"> | string
    ticket_body?: StringWithAggregatesFilter<"Tickets"> | string
    user_id?: StringWithAggregatesFilter<"Tickets"> | string
  }

  export type RepliesWhereInput = {
    AND?: RepliesWhereInput | RepliesWhereInput[]
    OR?: RepliesWhereInput[]
    NOT?: RepliesWhereInput | RepliesWhereInput[]
    id?: IntFilter<"Replies"> | number
    reply_body?: StringFilter<"Replies"> | string
    ticket_id?: IntFilter<"Replies"> | number
    user_id?: StringFilter<"Replies"> | string
    ticket?: XOR<TicketsRelationFilter, TicketsWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type RepliesOrderByWithRelationInput = {
    id?: SortOrder
    reply_body?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
    ticket?: TicketsOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
  }

  export type RepliesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RepliesWhereInput | RepliesWhereInput[]
    OR?: RepliesWhereInput[]
    NOT?: RepliesWhereInput | RepliesWhereInput[]
    reply_body?: StringFilter<"Replies"> | string
    ticket_id?: IntFilter<"Replies"> | number
    user_id?: StringFilter<"Replies"> | string
    ticket?: XOR<TicketsRelationFilter, TicketsWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type RepliesOrderByWithAggregationInput = {
    id?: SortOrder
    reply_body?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
    _count?: RepliesCountOrderByAggregateInput
    _avg?: RepliesAvgOrderByAggregateInput
    _max?: RepliesMaxOrderByAggregateInput
    _min?: RepliesMinOrderByAggregateInput
    _sum?: RepliesSumOrderByAggregateInput
  }

  export type RepliesScalarWhereWithAggregatesInput = {
    AND?: RepliesScalarWhereWithAggregatesInput | RepliesScalarWhereWithAggregatesInput[]
    OR?: RepliesScalarWhereWithAggregatesInput[]
    NOT?: RepliesScalarWhereWithAggregatesInput | RepliesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Replies"> | number
    reply_body?: StringWithAggregatesFilter<"Replies"> | string
    ticket_id?: IntWithAggregatesFilter<"Replies"> | number
    user_id?: StringWithAggregatesFilter<"Replies"> | string
  }

  export type UsersCreateInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url?: string
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketsCreateNestedManyWithoutUserInput
    replies?: RepliesCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url?: string
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketsUncheckedCreateNestedManyWithoutUserInput
    replies?: RepliesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketsUpdateManyWithoutUserNestedInput
    replies?: RepliesUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketsUncheckedUpdateManyWithoutUserNestedInput
    replies?: RepliesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url?: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketsCreateInput = {
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    user: UsersCreateNestedOneWithoutTicketsInput
    replies?: RepliesCreateNestedManyWithoutTicketInput
  }

  export type TicketsUncheckedCreateInput = {
    id?: number
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    user_id: string
    replies?: RepliesUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketsUpdateInput = {
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutTicketsNestedInput
    replies?: RepliesUpdateManyWithoutTicketNestedInput
  }

  export type TicketsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    replies?: RepliesUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketsCreateManyInput = {
    id?: number
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    user_id: string
  }

  export type TicketsUpdateManyMutationInput = {
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
  }

  export type TicketsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type RepliesCreateInput = {
    reply_body: string
    ticket: TicketsCreateNestedOneWithoutRepliesInput
    user: UsersCreateNestedOneWithoutRepliesInput
  }

  export type RepliesUncheckedCreateInput = {
    id?: number
    reply_body: string
    ticket_id: number
    user_id: string
  }

  export type RepliesUpdateInput = {
    reply_body?: StringFieldUpdateOperationsInput | string
    ticket?: TicketsUpdateOneRequiredWithoutRepliesNestedInput
    user?: UsersUpdateOneRequiredWithoutRepliesNestedInput
  }

  export type RepliesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reply_body?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type RepliesCreateManyInput = {
    id?: number
    reply_body: string
    ticket_id: number
    user_id: string
  }

  export type RepliesUpdateManyMutationInput = {
    reply_body?: StringFieldUpdateOperationsInput | string
  }

  export type RepliesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reply_body?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TicketsListRelationFilter = {
    every?: TicketsWhereInput
    some?: TicketsWhereInput
    none?: TicketsWhereInput
  }

  export type RepliesListRelationFilter = {
    every?: RepliesWhereInput
    some?: RepliesWhereInput
    none?: RepliesWhereInput
  }

  export type TicketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RepliesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    profile_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    profile_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    email?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    profile_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumStatusTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusType | EnumStatusTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusType[]
    notIn?: $Enums.StatusType[]
    not?: NestedEnumStatusTypeFilter<$PrismaModel> | $Enums.StatusType
  }

  export type EnumPriorityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityType | EnumPriorityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityType[]
    notIn?: $Enums.PriorityType[]
    not?: NestedEnumPriorityTypeFilter<$PrismaModel> | $Enums.PriorityType
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type TicketsCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority_status?: SortOrder
    request_ticket?: SortOrder
    due_date?: SortOrder
    role_pic?: SortOrder
    product_status?: SortOrder
    ticket_body?: SortOrder
    user_id?: SortOrder
  }

  export type TicketsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TicketsMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority_status?: SortOrder
    request_ticket?: SortOrder
    due_date?: SortOrder
    role_pic?: SortOrder
    product_status?: SortOrder
    ticket_body?: SortOrder
    user_id?: SortOrder
  }

  export type TicketsMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority_status?: SortOrder
    request_ticket?: SortOrder
    due_date?: SortOrder
    role_pic?: SortOrder
    product_status?: SortOrder
    ticket_body?: SortOrder
    user_id?: SortOrder
  }

  export type TicketsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumStatusTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusType | EnumStatusTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusType[]
    notIn?: $Enums.StatusType[]
    not?: NestedEnumStatusTypeWithAggregatesFilter<$PrismaModel> | $Enums.StatusType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusTypeFilter<$PrismaModel>
    _max?: NestedEnumStatusTypeFilter<$PrismaModel>
  }

  export type EnumPriorityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityType | EnumPriorityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityType[]
    notIn?: $Enums.PriorityType[]
    not?: NestedEnumPriorityTypeWithAggregatesFilter<$PrismaModel> | $Enums.PriorityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityTypeFilter<$PrismaModel>
    _max?: NestedEnumPriorityTypeFilter<$PrismaModel>
  }

  export type TicketsRelationFilter = {
    is?: TicketsWhereInput
    isNot?: TicketsWhereInput
  }

  export type RepliesCountOrderByAggregateInput = {
    id?: SortOrder
    reply_body?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
  }

  export type RepliesAvgOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
  }

  export type RepliesMaxOrderByAggregateInput = {
    id?: SortOrder
    reply_body?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
  }

  export type RepliesMinOrderByAggregateInput = {
    id?: SortOrder
    reply_body?: SortOrder
    ticket_id?: SortOrder
    user_id?: SortOrder
  }

  export type RepliesSumOrderByAggregateInput = {
    id?: SortOrder
    ticket_id?: SortOrder
  }

  export type TicketsCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type RepliesCreateNestedManyWithoutUserInput = {
    create?: XOR<RepliesCreateWithoutUserInput, RepliesUncheckedCreateWithoutUserInput> | RepliesCreateWithoutUserInput[] | RepliesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutUserInput | RepliesCreateOrConnectWithoutUserInput[]
    createMany?: RepliesCreateManyUserInputEnvelope
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
  }

  export type TicketsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
  }

  export type RepliesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RepliesCreateWithoutUserInput, RepliesUncheckedCreateWithoutUserInput> | RepliesCreateWithoutUserInput[] | RepliesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutUserInput | RepliesCreateOrConnectWithoutUserInput[]
    createMany?: RepliesCreateManyUserInputEnvelope
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TicketsUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutUserInput | TicketsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutUserInput | TicketsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutUserInput | TicketsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type RepliesUpdateManyWithoutUserNestedInput = {
    create?: XOR<RepliesCreateWithoutUserInput, RepliesUncheckedCreateWithoutUserInput> | RepliesCreateWithoutUserInput[] | RepliesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutUserInput | RepliesCreateOrConnectWithoutUserInput[]
    upsert?: RepliesUpsertWithWhereUniqueWithoutUserInput | RepliesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RepliesCreateManyUserInputEnvelope
    set?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    disconnect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    delete?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    update?: RepliesUpdateWithWhereUniqueWithoutUserInput | RepliesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RepliesUpdateManyWithWhereWithoutUserInput | RepliesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RepliesScalarWhereInput | RepliesScalarWhereInput[]
  }

  export type TicketsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput> | TicketsCreateWithoutUserInput[] | TicketsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketsCreateOrConnectWithoutUserInput | TicketsCreateOrConnectWithoutUserInput[]
    upsert?: TicketsUpsertWithWhereUniqueWithoutUserInput | TicketsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketsCreateManyUserInputEnvelope
    set?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    disconnect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    delete?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    connect?: TicketsWhereUniqueInput | TicketsWhereUniqueInput[]
    update?: TicketsUpdateWithWhereUniqueWithoutUserInput | TicketsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketsUpdateManyWithWhereWithoutUserInput | TicketsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
  }

  export type RepliesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RepliesCreateWithoutUserInput, RepliesUncheckedCreateWithoutUserInput> | RepliesCreateWithoutUserInput[] | RepliesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutUserInput | RepliesCreateOrConnectWithoutUserInput[]
    upsert?: RepliesUpsertWithWhereUniqueWithoutUserInput | RepliesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RepliesCreateManyUserInputEnvelope
    set?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    disconnect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    delete?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    update?: RepliesUpdateWithWhereUniqueWithoutUserInput | RepliesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RepliesUpdateManyWithWhereWithoutUserInput | RepliesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RepliesScalarWhereInput | RepliesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutTicketsInput = {
    create?: XOR<UsersCreateWithoutTicketsInput, UsersUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTicketsInput
    connect?: UsersWhereUniqueInput
  }

  export type RepliesCreateNestedManyWithoutTicketInput = {
    create?: XOR<RepliesCreateWithoutTicketInput, RepliesUncheckedCreateWithoutTicketInput> | RepliesCreateWithoutTicketInput[] | RepliesUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutTicketInput | RepliesCreateOrConnectWithoutTicketInput[]
    createMany?: RepliesCreateManyTicketInputEnvelope
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
  }

  export type RepliesUncheckedCreateNestedManyWithoutTicketInput = {
    create?: XOR<RepliesCreateWithoutTicketInput, RepliesUncheckedCreateWithoutTicketInput> | RepliesCreateWithoutTicketInput[] | RepliesUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutTicketInput | RepliesCreateOrConnectWithoutTicketInput[]
    createMany?: RepliesCreateManyTicketInputEnvelope
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
  }

  export type EnumStatusTypeFieldUpdateOperationsInput = {
    set?: $Enums.StatusType
  }

  export type EnumPriorityTypeFieldUpdateOperationsInput = {
    set?: $Enums.PriorityType
  }

  export type UsersUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<UsersCreateWithoutTicketsInput, UsersUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTicketsInput
    upsert?: UsersUpsertWithoutTicketsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutTicketsInput, UsersUpdateWithoutTicketsInput>, UsersUncheckedUpdateWithoutTicketsInput>
  }

  export type RepliesUpdateManyWithoutTicketNestedInput = {
    create?: XOR<RepliesCreateWithoutTicketInput, RepliesUncheckedCreateWithoutTicketInput> | RepliesCreateWithoutTicketInput[] | RepliesUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutTicketInput | RepliesCreateOrConnectWithoutTicketInput[]
    upsert?: RepliesUpsertWithWhereUniqueWithoutTicketInput | RepliesUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: RepliesCreateManyTicketInputEnvelope
    set?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    disconnect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    delete?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    update?: RepliesUpdateWithWhereUniqueWithoutTicketInput | RepliesUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: RepliesUpdateManyWithWhereWithoutTicketInput | RepliesUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: RepliesScalarWhereInput | RepliesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RepliesUncheckedUpdateManyWithoutTicketNestedInput = {
    create?: XOR<RepliesCreateWithoutTicketInput, RepliesUncheckedCreateWithoutTicketInput> | RepliesCreateWithoutTicketInput[] | RepliesUncheckedCreateWithoutTicketInput[]
    connectOrCreate?: RepliesCreateOrConnectWithoutTicketInput | RepliesCreateOrConnectWithoutTicketInput[]
    upsert?: RepliesUpsertWithWhereUniqueWithoutTicketInput | RepliesUpsertWithWhereUniqueWithoutTicketInput[]
    createMany?: RepliesCreateManyTicketInputEnvelope
    set?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    disconnect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    delete?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    connect?: RepliesWhereUniqueInput | RepliesWhereUniqueInput[]
    update?: RepliesUpdateWithWhereUniqueWithoutTicketInput | RepliesUpdateWithWhereUniqueWithoutTicketInput[]
    updateMany?: RepliesUpdateManyWithWhereWithoutTicketInput | RepliesUpdateManyWithWhereWithoutTicketInput[]
    deleteMany?: RepliesScalarWhereInput | RepliesScalarWhereInput[]
  }

  export type TicketsCreateNestedOneWithoutRepliesInput = {
    create?: XOR<TicketsCreateWithoutRepliesInput, TicketsUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: TicketsCreateOrConnectWithoutRepliesInput
    connect?: TicketsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutRepliesInput = {
    create?: XOR<UsersCreateWithoutRepliesInput, UsersUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRepliesInput
    connect?: UsersWhereUniqueInput
  }

  export type TicketsUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<TicketsCreateWithoutRepliesInput, TicketsUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: TicketsCreateOrConnectWithoutRepliesInput
    upsert?: TicketsUpsertWithoutRepliesInput
    connect?: TicketsWhereUniqueInput
    update?: XOR<XOR<TicketsUpdateToOneWithWhereWithoutRepliesInput, TicketsUpdateWithoutRepliesInput>, TicketsUncheckedUpdateWithoutRepliesInput>
  }

  export type UsersUpdateOneRequiredWithoutRepliesNestedInput = {
    create?: XOR<UsersCreateWithoutRepliesInput, UsersUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRepliesInput
    upsert?: UsersUpsertWithoutRepliesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutRepliesInput, UsersUpdateWithoutRepliesInput>, UsersUncheckedUpdateWithoutRepliesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[]
    notIn?: $Enums.UserRole[]
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumStatusTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusType | EnumStatusTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusType[]
    notIn?: $Enums.StatusType[]
    not?: NestedEnumStatusTypeFilter<$PrismaModel> | $Enums.StatusType
  }

  export type NestedEnumPriorityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityType | EnumPriorityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityType[]
    notIn?: $Enums.PriorityType[]
    not?: NestedEnumPriorityTypeFilter<$PrismaModel> | $Enums.PriorityType
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumStatusTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusType | EnumStatusTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StatusType[]
    notIn?: $Enums.StatusType[]
    not?: NestedEnumStatusTypeWithAggregatesFilter<$PrismaModel> | $Enums.StatusType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusTypeFilter<$PrismaModel>
    _max?: NestedEnumStatusTypeFilter<$PrismaModel>
  }

  export type NestedEnumPriorityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriorityType | EnumPriorityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriorityType[]
    notIn?: $Enums.PriorityType[]
    not?: NestedEnumPriorityTypeWithAggregatesFilter<$PrismaModel> | $Enums.PriorityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityTypeFilter<$PrismaModel>
    _max?: NestedEnumPriorityTypeFilter<$PrismaModel>
  }

  export type TicketsCreateWithoutUserInput = {
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    replies?: RepliesCreateNestedManyWithoutTicketInput
  }

  export type TicketsUncheckedCreateWithoutUserInput = {
    id?: number
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    replies?: RepliesUncheckedCreateNestedManyWithoutTicketInput
  }

  export type TicketsCreateOrConnectWithoutUserInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput>
  }

  export type TicketsCreateManyUserInputEnvelope = {
    data: TicketsCreateManyUserInput | TicketsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RepliesCreateWithoutUserInput = {
    reply_body: string
    ticket: TicketsCreateNestedOneWithoutRepliesInput
  }

  export type RepliesUncheckedCreateWithoutUserInput = {
    id?: number
    reply_body: string
    ticket_id: number
  }

  export type RepliesCreateOrConnectWithoutUserInput = {
    where: RepliesWhereUniqueInput
    create: XOR<RepliesCreateWithoutUserInput, RepliesUncheckedCreateWithoutUserInput>
  }

  export type RepliesCreateManyUserInputEnvelope = {
    data: RepliesCreateManyUserInput | RepliesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TicketsUpsertWithWhereUniqueWithoutUserInput = {
    where: TicketsWhereUniqueInput
    update: XOR<TicketsUpdateWithoutUserInput, TicketsUncheckedUpdateWithoutUserInput>
    create: XOR<TicketsCreateWithoutUserInput, TicketsUncheckedCreateWithoutUserInput>
  }

  export type TicketsUpdateWithWhereUniqueWithoutUserInput = {
    where: TicketsWhereUniqueInput
    data: XOR<TicketsUpdateWithoutUserInput, TicketsUncheckedUpdateWithoutUserInput>
  }

  export type TicketsUpdateManyWithWhereWithoutUserInput = {
    where: TicketsScalarWhereInput
    data: XOR<TicketsUpdateManyMutationInput, TicketsUncheckedUpdateManyWithoutUserInput>
  }

  export type TicketsScalarWhereInput = {
    AND?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
    OR?: TicketsScalarWhereInput[]
    NOT?: TicketsScalarWhereInput | TicketsScalarWhereInput[]
    id?: IntFilter<"Tickets"> | number
    status?: EnumStatusTypeFilter<"Tickets"> | $Enums.StatusType
    priority_status?: EnumPriorityTypeFilter<"Tickets"> | $Enums.PriorityType
    request_ticket?: StringFilter<"Tickets"> | string
    due_date?: StringFilter<"Tickets"> | string
    role_pic?: StringFilter<"Tickets"> | string
    product_status?: StringFilter<"Tickets"> | string
    ticket_body?: StringFilter<"Tickets"> | string
    user_id?: StringFilter<"Tickets"> | string
  }

  export type RepliesUpsertWithWhereUniqueWithoutUserInput = {
    where: RepliesWhereUniqueInput
    update: XOR<RepliesUpdateWithoutUserInput, RepliesUncheckedUpdateWithoutUserInput>
    create: XOR<RepliesCreateWithoutUserInput, RepliesUncheckedCreateWithoutUserInput>
  }

  export type RepliesUpdateWithWhereUniqueWithoutUserInput = {
    where: RepliesWhereUniqueInput
    data: XOR<RepliesUpdateWithoutUserInput, RepliesUncheckedUpdateWithoutUserInput>
  }

  export type RepliesUpdateManyWithWhereWithoutUserInput = {
    where: RepliesScalarWhereInput
    data: XOR<RepliesUpdateManyMutationInput, RepliesUncheckedUpdateManyWithoutUserInput>
  }

  export type RepliesScalarWhereInput = {
    AND?: RepliesScalarWhereInput | RepliesScalarWhereInput[]
    OR?: RepliesScalarWhereInput[]
    NOT?: RepliesScalarWhereInput | RepliesScalarWhereInput[]
    id?: IntFilter<"Replies"> | number
    reply_body?: StringFilter<"Replies"> | string
    ticket_id?: IntFilter<"Replies"> | number
    user_id?: StringFilter<"Replies"> | string
  }

  export type UsersCreateWithoutTicketsInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url?: string
    created_at?: Date | string
    updated_at?: Date | string
    replies?: RepliesCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutTicketsInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url?: string
    created_at?: Date | string
    updated_at?: Date | string
    replies?: RepliesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutTicketsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTicketsInput, UsersUncheckedCreateWithoutTicketsInput>
  }

  export type RepliesCreateWithoutTicketInput = {
    reply_body: string
    user: UsersCreateNestedOneWithoutRepliesInput
  }

  export type RepliesUncheckedCreateWithoutTicketInput = {
    id?: number
    reply_body: string
    user_id: string
  }

  export type RepliesCreateOrConnectWithoutTicketInput = {
    where: RepliesWhereUniqueInput
    create: XOR<RepliesCreateWithoutTicketInput, RepliesUncheckedCreateWithoutTicketInput>
  }

  export type RepliesCreateManyTicketInputEnvelope = {
    data: RepliesCreateManyTicketInput | RepliesCreateManyTicketInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutTicketsInput = {
    update: XOR<UsersUpdateWithoutTicketsInput, UsersUncheckedUpdateWithoutTicketsInput>
    create: XOR<UsersCreateWithoutTicketsInput, UsersUncheckedCreateWithoutTicketsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutTicketsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutTicketsInput, UsersUncheckedUpdateWithoutTicketsInput>
  }

  export type UsersUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: RepliesUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    replies?: RepliesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RepliesUpsertWithWhereUniqueWithoutTicketInput = {
    where: RepliesWhereUniqueInput
    update: XOR<RepliesUpdateWithoutTicketInput, RepliesUncheckedUpdateWithoutTicketInput>
    create: XOR<RepliesCreateWithoutTicketInput, RepliesUncheckedCreateWithoutTicketInput>
  }

  export type RepliesUpdateWithWhereUniqueWithoutTicketInput = {
    where: RepliesWhereUniqueInput
    data: XOR<RepliesUpdateWithoutTicketInput, RepliesUncheckedUpdateWithoutTicketInput>
  }

  export type RepliesUpdateManyWithWhereWithoutTicketInput = {
    where: RepliesScalarWhereInput
    data: XOR<RepliesUpdateManyMutationInput, RepliesUncheckedUpdateManyWithoutTicketInput>
  }

  export type TicketsCreateWithoutRepliesInput = {
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    user: UsersCreateNestedOneWithoutTicketsInput
  }

  export type TicketsUncheckedCreateWithoutRepliesInput = {
    id?: number
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
    user_id: string
  }

  export type TicketsCreateOrConnectWithoutRepliesInput = {
    where: TicketsWhereUniqueInput
    create: XOR<TicketsCreateWithoutRepliesInput, TicketsUncheckedCreateWithoutRepliesInput>
  }

  export type UsersCreateWithoutRepliesInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url?: string
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutRepliesInput = {
    id?: string
    role?: $Enums.UserRole
    email: string
    fullname: string
    username: string
    phone_number: string
    password: string
    profile_url?: string
    created_at?: Date | string
    updated_at?: Date | string
    tickets?: TicketsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutRepliesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRepliesInput, UsersUncheckedCreateWithoutRepliesInput>
  }

  export type TicketsUpsertWithoutRepliesInput = {
    update: XOR<TicketsUpdateWithoutRepliesInput, TicketsUncheckedUpdateWithoutRepliesInput>
    create: XOR<TicketsCreateWithoutRepliesInput, TicketsUncheckedCreateWithoutRepliesInput>
    where?: TicketsWhereInput
  }

  export type TicketsUpdateToOneWithWhereWithoutRepliesInput = {
    where?: TicketsWhereInput
    data: XOR<TicketsUpdateWithoutRepliesInput, TicketsUncheckedUpdateWithoutRepliesInput>
  }

  export type TicketsUpdateWithoutRepliesInput = {
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type TicketsUncheckedUpdateWithoutRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpsertWithoutRepliesInput = {
    update: XOR<UsersUpdateWithoutRepliesInput, UsersUncheckedUpdateWithoutRepliesInput>
    create: XOR<UsersCreateWithoutRepliesInput, UsersUncheckedCreateWithoutRepliesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutRepliesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutRepliesInput, UsersUncheckedUpdateWithoutRepliesInput>
  }

  export type UsersUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: TicketsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TicketsCreateManyUserInput = {
    id?: number
    status?: $Enums.StatusType
    priority_status?: $Enums.PriorityType
    request_ticket: string
    due_date: string
    role_pic: string
    product_status: string
    ticket_body: string
  }

  export type RepliesCreateManyUserInput = {
    id?: number
    reply_body: string
    ticket_id: number
  }

  export type TicketsUpdateWithoutUserInput = {
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
    replies?: RepliesUpdateManyWithoutTicketNestedInput
  }

  export type TicketsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
    replies?: RepliesUncheckedUpdateManyWithoutTicketNestedInput
  }

  export type TicketsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusTypeFieldUpdateOperationsInput | $Enums.StatusType
    priority_status?: EnumPriorityTypeFieldUpdateOperationsInput | $Enums.PriorityType
    request_ticket?: StringFieldUpdateOperationsInput | string
    due_date?: StringFieldUpdateOperationsInput | string
    role_pic?: StringFieldUpdateOperationsInput | string
    product_status?: StringFieldUpdateOperationsInput | string
    ticket_body?: StringFieldUpdateOperationsInput | string
  }

  export type RepliesUpdateWithoutUserInput = {
    reply_body?: StringFieldUpdateOperationsInput | string
    ticket?: TicketsUpdateOneRequiredWithoutRepliesNestedInput
  }

  export type RepliesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reply_body?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
  }

  export type RepliesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    reply_body?: StringFieldUpdateOperationsInput | string
    ticket_id?: IntFieldUpdateOperationsInput | number
  }

  export type RepliesCreateManyTicketInput = {
    id?: number
    reply_body: string
    user_id: string
  }

  export type RepliesUpdateWithoutTicketInput = {
    reply_body?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutRepliesNestedInput
  }

  export type RepliesUncheckedUpdateWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    reply_body?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type RepliesUncheckedUpdateManyWithoutTicketInput = {
    id?: IntFieldUpdateOperationsInput | number
    reply_body?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsCountOutputTypeDefaultArgs instead
     */
    export type TicketsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsDefaultArgs instead
     */
    export type TicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RepliesDefaultArgs instead
     */
    export type RepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RepliesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}